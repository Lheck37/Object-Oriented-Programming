#Assignment 3, Question 1

# Standard library only.
import re
import sys
import urllib.request

def clean_word(w):
    # keep only letters and numbers; lowercase
    out = ""
    for ch in w:
        if ch.isalnum():
            out += ch.lower()
    return out

def count_words(text):
    # split by whitespace, clean each token, skip empty
    counts = {}
    parts = text.split()
    for token in parts:
        w = clean_word(token)
        if w == "":
            continue
        if w in counts:
            counts[w] += 1
        else:
            counts[w] = 1
    return counts

def download_declaration():
    """
    Try to download the Declaration transcript.
    If it fails (e.g., no internet), return empty string.
    """
    url = "https://www.archives.gov/founding-docs/declaration-transcript"
    try:
        with urllib.request.urlopen(url, timeout=15) as resp:
            html = resp.read().decode("utf-8", errors="ignore")
            # very basic strip: remove tags and keep text
            # not perfect, but good enough for this assignment
            text = re.sub(r"<[^>]+>", " ", html)
            return text
    except Exception:
        return ""

def read_local_file(path):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return f.read()
    except Exception:
        return ""

def main():
    # Usage:
    #   python problem1_word_freq.py [--local path_to_text_file] [--top N]
    # If neither provided, we'll try to download the Declaration transcript.
    local_path = None
    topN = 25
    i = 1
    while i < len(sys.argv):
        if sys.argv[i] == "--local" and i + 1 < len(sys.argv):
            local_path = sys.argv[i+1]
            i += 2
        elif sys.argv[i] == "--top" and i + 1 < len(sys.argv):
            try:
                topN = int(sys.argv[i+1])
            except:
                topN = 25
            i += 2
        else:
            i += 1

    text = ""
    if local_path is not None:
        text = read_local_file(local_path)
    if text.strip() == "":
        text = download_declaration()

    if text.strip() == "":
        print("Could not load the Declaration text. Try --local path or run with internet.")
        print("Below is a small demo using a tiny sample string so you can see the output format.\n")
        sample = "Right rights Rightly RIGHT, and the rights of people are important. Rights! right?"
        counts = count_words(sample)
    else:
        counts = count_words(text)

    # Print "Right" and "Rights" totals (case-insensitive)
    right_count = counts.get("right", 0)
    rights_count = counts.get("rights", 0)
    print("Count for 'Right' (case-insensitive):", right_count)
    print("Count for 'Rights' (case-insensitive):", rights_count)
    print()

    # Print top N words
    items = list(counts.items())
    # sort by count desc, then word asc
    items.sort(key=lambda x: (-x[1], x[0]))
    print("Top", topN, "words:")
    shown = 0
    for w, c in items:
        print(w, "->", c)
        shown += 1
        if shown >= topN:
            break

if __name__ == "__main__":
    main()
